{"version":3,"file":"static/js/523.65cfb340.chunk.js","mappings":"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","sources":["components/LinkButton/LinkButton.styled.jsx","components/Movie/Movie.styled.jsx","components/Movie/Movie.jsx","pages/MovieDetails/MovieDetails.jsx","utils/getImagePosterPath.js","utils/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  padding: 12px;\n  height: 30px;\n  width: 130px;\n  text-decoration: none;\n  font-size: 20px;\n  font-weight: 400;\n  text-align: center;\n  background-color: navy;\n  color: yellow;\n  border-radius: 10px;\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus-visible {\n    background-color: yellow;\n    color: navy;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Main = styled.main`\n  padding-top: 40px;\n  padding-bottom: 40px;\n  flex-grow: 1;\n`;\n\nexport const Container = styled.div`\n  max-width: 320px;\n  margin: 0 auto;\n  padding: 0 20px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n    padding: 0 32px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 1280px;\n  }\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-top: 30px;\n  margin-bottom: 30px;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px;\n  @media screen and (min-width: 768px) {\n    width: 250px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 300px;\n  }\n`;\n\nexport const Navigation = styled.nav`\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n`;\n\nexport const MovieInfoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const Rate = styled.p`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 30px;\n  background-color: navy;\n  color: yellow;\n  font-size: 18px;\n  border-radius: 5px;\n`;\n","import { Outlet, useLocation } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { IoIosArrowRoundBack } from 'react-icons/io';\nimport Loader from 'components/Loader';\nimport { StyledLink } from 'components/LinkButton/LinkButton.styled';\nimport {\n  Main,\n  Container,\n  MovieInfo,\n  Image,\n  Navigation,\n  MovieInfoWrapper,\n  Rate,\n} from './Movie.styled';\n\nfunction Movie({\n  movie: { title, posterPath, overview, genres, vote, year },\n}) {\n  const { state, pathname } = useLocation();\n\n  return (\n    <Main>\n      <Container>\n        <StyledLink to={state?.from ?? '/'}>\n          <IoIosArrowRoundBack />\n          Go back\n        </StyledLink>\n        <MovieInfo>\n          <Image src={posterPath} alt={title} />\n          <div>\n            <MovieInfoWrapper>\n              <h1>\n                {title} ({year ? year : 'xxxx'})\n              </h1>\n              {vote !== 0 && <Rate>{vote}</Rate>}\n            </MovieInfoWrapper>\n            <h2>Overview</h2>\n            {overview ? <p>{overview}</p> : 'Information is not available'}\n            <h2>Genres</h2>\n            {genres ? <p>{genres}</p> : 'Information is not available'}\n          </div>\n        </MovieInfo>\n        <Navigation>\n          <StyledLink\n            to={pathname.includes('cast') ? '' : 'cast'}\n            state={{ from: state?.from ?? '/' }}\n          >\n            {pathname.includes('cast') ? 'Hide Cast' : 'Show Cast'}\n          </StyledLink>\n          <StyledLink\n            to={pathname.includes('reviews') ? '' : 'reviews'}\n            state={{ from: state?.from ?? '/' }}\n          >\n            {pathname.includes('reviews') ? 'Hide Reviews' : 'Show Reviews'}\n          </StyledLink>\n        </Navigation>\n        <Suspense fallback={<Loader/>}>\n        <Outlet />\n        </Suspense>\n      </Container>\n    </Main>\n  );\n}\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    posterPath: PropTypes.string,\n    overview: PropTypes.string,\n    genres: PropTypes.string,\n    vote: PropTypes.number,\n    year: PropTypes.string,\n  }).isRequired,\n};\nexport default Movie;\n","import { useState, useEffect } from 'react';\nimport {  useParams} from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieDetails } from 'utils/api';\n\nimport Movie from 'components/Movie';\nimport Loader from 'components/Loader';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const abortController = new AbortController();\n\n    async function addMovieDetails() {\n      setStatus('pending');\n      try {\n        const movie = await getMovieDetails(movieId, abortController);\n        setMovieDetails(movie);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n    addMovieDetails();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if(error === 'canceled') {\n      return;\n    }\n    if(error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error])\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && <Movie movie={movieDetails} />}\n    </>\n  );\n}\n\nexport default MovieDetails;\n","import defaultImage from 'images/no-image.jpg';\n\nexport function getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n","import axios from 'axios';\nimport { getImagePosterPath } from 'utils/getImagePosterPath';\n\nconst API_KEY = '1196368753ba671380e452b9a1020481';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMoviesByQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["StyledLink","styled","Link","Main","Container","MovieInfo","Image","Navigation","MovieInfoWrapper","Rate","movie","title","posterPath","overview","genres","vote","year","useLocation","state","pathname","to","from","src","alt","includes","Suspense","fallback","Loader","movieId","useParams","useState","movieDetails","setMovieDetails","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieDetails","abort","getMovieDetails","message","toast","getImagePosterPath","path","defaultImage","API_KEY","BASE_URL","getTrendingMovies","page","controller","axios","signal","response","movies","data","results","map","id","poster_path","totalPages","total_pages","vote_average","release_date","genre","name","join","toFixed","slice","getMovieCast","actors","cast","profile_path","character","profilePath","getMovieReviews","reviews","author","content","getMoviesByQuery","query","totalResults","total_results"],"sourceRoot":""}