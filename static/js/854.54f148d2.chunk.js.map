{"version":3,"file":"static/js/854.54f148d2.chunk.js","mappings":"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","sources":["components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","components/ActorsGallery/ActorsGallery.styled.jsx","components/ActorsGallery/ActorsGallery.jsx","components/Cast/Cast.jsx","utils/getImagePosterPath.js","utils/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style: none;\n  height: auto;\n  width: calc((100% - 20px) / 2);\n  border-radius: 10px;\n  background-color: navy;\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 60px) / 4);\n  }\n  @media screen and (min-width: 1280px) {\n    width: calc((100% - 100px) / 6);\n  }\n`;\nexport const ActorPhoto = styled.img`\n  width: 100%;\n  height: 250px;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const ActorInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n`;\n\nexport const ActorInfoText = styled.p`\n  margin: 0;\n  color: yellow;\n  font-size: 16px;\n`;\n\nexport const ActorSpanText = styled.span`\n    font-weight: 700;\n`\n","import PropTypes from 'prop-types';\nimport {\n  ActorCard,\n  ActorPhoto,\n  ActorInfoText,\n  ActorInfoWrapper,\n  ActorSpanText,\n} from './Actor.styled';\n\nfunction Actor({ actor: { name, profilePath, character } }) {\n  return (\n    <ActorCard>\n      <ActorPhoto src={profilePath} alt={name} />\n      <ActorInfoWrapper>\n        <ActorInfoText>\n          <ActorSpanText>Name:</ActorSpanText> {name}\n        </ActorInfoText>\n        <ActorInfoText>\n          <ActorSpanText>Character:</ActorSpanText> {character}\n        </ActorInfoText>\n      </ActorInfoWrapper>\n    </ActorCard>\n  );\n}\n\nActor.propTypes = {\n  actor: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profilePath: PropTypes.string,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Actor;\n","import styled from '@emotion/styled';\n\nexport const ActorsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n  margin-top: 30px;\n  padding: 0;\n`;\n","import PropTypes from 'prop-types';\nimport Actor from \"components/Actor/Actor\";\nimport { ActorsList } from \"./ActorsGallery.styled\";\n\nfunction ActorsGallery ({actors}) {\n    return (\n        <ActorsList>\n            {actors.map(actor => (\n                <Actor key={actor.id} actor={actor}/>\n            ))}\n        </ActorsList>\n    )\n}\n\nActorsGallery.propTypes = {\n    actors: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n      }).isRequired\n    ).isRequired,\n  };\n\nexport default ActorsGallery;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from 'utils/api';\n\nimport Loader from 'components/Loader';\nimport ActorsGallery from 'components/ActorsGallery';\n\nfunction Cast() {\n  const { movieId } = useParams();\n    const [movieCast, setMovieCast] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const abortController = new AbortController();\n    async function addMovieCast() {\n      setStatus('pending');\n      try {\n        const cast = await getMovieCast(movieId, abortController);\n        setMovieCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    addMovieCast(movieId, abortController);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if(error === 'canceled') {\n      return;\n    }\n    if(error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error])\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && movieCast.length !== 0 && <ActorsGallery actors={movieCast} />}\n    </>\n  );\n}\n\nexport default Cast;\n","import defaultImage from 'images/no-image.jpg';\n\nexport function getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n","import axios from 'axios';\nimport { getImagePosterPath } from 'utils/getImagePosterPath';\n\nconst API_KEY = '1196368753ba671380e452b9a1020481';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMoviesByQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["ActorCard","styled","ActorPhoto","ActorInfoWrapper","ActorInfoText","ActorSpanText","actor","name","profilePath","character","src","alt","ActorsList","actors","map","id","movieId","useParams","useState","movieCast","setMovieCast","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieCast","abort","getMovieCast","cast","message","toast","Loader","length","getImagePosterPath","path","defaultImage","API_KEY","BASE_URL","getTrendingMovies","page","controller","axios","signal","response","movies","data","results","title","posterPath","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","join","vote","toFixed","year","slice","profile_path","getMovieReviews","reviews","author","content","getMoviesByQuery","query","totalResults","total_results"],"sourceRoot":""}