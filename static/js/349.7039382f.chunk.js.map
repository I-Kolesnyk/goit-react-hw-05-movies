{"version":3,"file":"static/js/349.7039382f.chunk.js","mappings":"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","sources":["components/MoviesGalleryItem/MoviesGalleryItem.styled.jsx","components/MoviesGalleryItem/MoviesGalerryItem.jsx","components/MoviesGallery/MoviesGallery.styled.jsx","components/MoviesGallery/MoviesGallery.jsx","components/Pagination/Pagination.styled.jsx","components/Pagination/Pagination.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","utils/getImagePosterPath.js","utils/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const GalleryItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n  height: auto;\n  width: 240px;\n  background-color: navy;\n  text-align: center;\n  border-radius: 10px;\n  transform: scale(1);\n  transition: transform 250ms linear;\n  &:hover {\n    transform: scale(1.04);\n  }\n`;\n\nexport const GalleryImage = styled.img`\n  display: block;\n  height: 360px;\n  width: 100%;\n  border-radius: 10px;\n`;\n\nexport const MovieTitle = styled.p`\n  margin: 0;\n  padding: 10px;\n  color: yellow;\n  font-size: 18px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  GalleryItem,\n  GalleryImage,\n  MovieTitle,\n} from './MoviesGalleryItem.styled';\n\nfunction MoviesGalleryItem({ movie: { id, title, posterPath } }) {\n  const location = useLocation();\n  \n  return (\n    <GalleryItem>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <GalleryImage src={posterPath} alt={title} />\n        <MovieTitle>{title}</MovieTitle>\n      </Link>\n    </GalleryItem>\n  );\n}\n\nMoviesGalleryItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    posterPath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MoviesGalleryItem;\n","import styled from '@emotion/styled';\n\nexport const GalleryList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  padding: 0;\n`;\n","import PropTypes from 'prop-types';\nimport MoviesGalleryItem from 'components/MoviesGalleryItem';\nimport { GalleryList } from './MoviesGallery.styled';\n\nfunction MoviesGallery({ movies }) {\n  return (\n    <GalleryList>\n      {movies.map(movie => (\n        <MoviesGalleryItem key={movie.id} movie={movie} />\n      ))}\n    </GalleryList>\n  );\n}\n\nMoviesGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      posterPath: PropTypes.string,\n      overview: PropTypes.string,\n      genres: PropTypes.string,\n      vote: PropTypes.number,\n      year: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesGallery;\n","import styled from '@emotion/styled';\nimport ReactPaginate from 'react-paginate';\n\nexport const StyledPagination = styled(ReactPaginate)`\n  margin-top: 50px;\n  margin-bottom: 50px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0;\n\n  li a {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    width: 40px;\n    border-radius: 7px;\n    border: navy 2px solid;\n    text-decoration: none;\n    font-size: 14px;\n    color: navy;\n    cursor: pointer;\n  }\n   li.active a {\n    background-color: navy;\n    border-color: transparent;\n    color: yellow;\n  }\n  li.disabled a {\n    color: grey;\n  }\n  li.disable,\n  li.disabled a {\n    cursor: default;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledPagination } from './Pagination.styled';\n\nimport { TfiAngleLeft } from 'react-icons/tfi';\nimport { TfiAngleRight } from 'react-icons/tfi';\n\nfunction Pagination({ page, totalPages, changePage }) {\n  const handlePageClick = event => {\n    changePage(event.selected + 1);\n  };\n  return (\n    <StyledPagination\n      previousLabel={<TfiAngleLeft />}\n      nextLabel={<TfiAngleRight />}\n      breakLabel=\"...\"\n      pageCount={totalPages}\n      pageRangeDisplayed={3}\n      marginPagesDisplayed={2}\n      onPageChange={handlePageClick}\n      activeClassName=\"active\"\n      hrefBuilder={(page, pageCount) =>\n        page >= 1 && page <= pageCount ? `/page/${page}` : '#'\n      }\n      forcePage={page - 1}\n    />\n  );\n}\n\nPagination.propTypes = {\n  page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  totalPages: PropTypes.number.isRequired,\n  changePage: PropTypes.func.isRequired,\n};\nexport default Pagination;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n    color: navy;\n`\n\nexport const Container = styled.div`\nmax-width: 320px;\n  margin: 0 auto;\n  padding: 0 20px;\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n    padding: 0 32px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 1280px;\n  }\n`\nexport const Main = styled.main `\n  flex-grow: 1;\n`","import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getTrendingMovies } from 'utils/api';\n\nimport MoviesGallery from 'components/MoviesGallery';\nimport Pagination from 'components/Pagination/Pagination';\nimport Loader from 'components/Loader';\n\nimport { Title, Container, Main } from './Home.styled';\n\nfunction Home() {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [error, setError] = useState('');\n\n  const navigate = useNavigate();\n  const params = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function addTrendingMovies() {\n      setStatus('pending');\n      try {\n        const trendingMovies = await getTrendingMovies(page, abortController);\n        setMovies(trendingMovies.movies);\n        setTotalPages(trendingMovies.totalPages);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n    addTrendingMovies();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [page]);\n\n  useEffect(() => {\n    if (params.page) {\n      setPage(params.page);\n      return;\n    }\n    setPage(1);\n  }, [params.page]);\n\n  useEffect(() => {\n    if(error === 'canceled') {\n      return;\n    }\n    if(error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error])\n\n  const changePage = currentPage => {\n    navigate(`/${currentPage}`);\n    setPage(currentPage);\n  };\n\n  return (\n    <Main>\n      <Container>\n        {status === 'pending' && <Loader />}\n        {status === 'resolved' && <Title>Trending today</Title>}\n        {status === 'resolved' && <MoviesGallery movies={movies} />}\n        {status === 'resolved' && (\n          <Pagination\n            page={page}\n            totalPages={totalPages}\n            changePage={changePage}\n          />\n        )}\n        \n      </Container>\n    </Main>\n  );\n}\n\nexport default Home;\n","import defaultImage from 'images/no-image.jpg';\n\nexport function getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n","import axios from 'axios';\nimport { getImagePosterPath } from 'utils/getImagePosterPath';\n\nconst API_KEY = '1196368753ba671380e452b9a1020481';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMoviesByQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["GalleryItem","styled","GalleryImage","MovieTitle","movie","id","title","posterPath","location","useLocation","to","state","from","src","alt","GalleryList","movies","map","StyledPagination","ReactPaginate","page","totalPages","changePage","previousLabel","nextLabel","breakLabel","pageCount","pageRangeDisplayed","marginPagesDisplayed","onPageChange","event","selected","activeClassName","hrefBuilder","forcePage","Title","Container","Main","useState","setMovies","status","setStatus","setPage","setTotalPages","error","setError","navigate","useNavigate","params","useParams","useEffect","abortController","AbortController","getTrendingMovies","trendingMovies","message","addTrendingMovies","abort","toast","Loader","MoviesGallery","Pagination","currentPage","getImagePosterPath","path","defaultImage","API_KEY","BASE_URL","controller","axios","signal","response","data","results","poster_path","total_pages","getMovieDetails","movieId","overview","genres","vote_average","release_date","genre","name","join","vote","toFixed","year","slice","getMovieCast","actors","cast","profile_path","character","profilePath","getMovieReviews","reviews","author","content","getMoviesByQuery","query","totalResults","total_results"],"sourceRoot":""}