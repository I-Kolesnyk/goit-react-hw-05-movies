{"version":3,"file":"static/js/877.fded762c.chunk.js","mappings":"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","sources":["components/ReviewsInfo/ReviewsInfo.styled.jsx","components/ReviewsInfo/ReviewsInfo.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Reviews/Reviews.jsx","utils/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  gap: 15px;\n  padding: 0;\n`;\n\nexport const ReviewItem = styled.li`\n  padding: 15px;\n  list-style: none;\n  border: 3px solid navy;\n  border-radius: 10px;\n`;\n\nexport const ReviewTitle = styled.h2`\n    color: navy;\n`\n","import PropTypes from 'prop-types';\nimport { ReviewsList, ReviewItem, ReviewTitle } from './ReviewsInfo.styled';\n\nfunction ReviewsInfo({ reviews }) {\n  return (\n    <ReviewsList>\n      {reviews.map(({ id, author, content }) => (\n        <ReviewItem key={id}>\n          <ReviewTitle>{author}</ReviewTitle>\n          <p>{content}</p>\n        </ReviewItem>\n      ))}\n    </ReviewsList>\n  );\n}\n\nReviewsInfo.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default ReviewsInfo;\n","import styled from '@emotion/styled';\n\nexport const MessageWrapper = styled.div`\n  margin-top: 30px;\n  text-align: center;\n`;\n\nexport const MessageText = styled.p`\n    font-size: 20px;\n`","import { MessageWrapper, MessageText } from \"./Message.styled\";\n\nfunction Message () {\n    return (\n        <MessageWrapper>\n            <MessageText>There are no reviews for this movie.</MessageText>\n        </MessageWrapper>\n    )\n}\n\nexport default Message;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieReviews } from 'utils/api';\n\nimport Loader from 'components/Loader';\nimport ReviewsInfo from 'components/ReviewsInfo';\nimport Message from 'components/Message';\n\nfunction Reviews() {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const abortController = new AbortController();\n    async function addMovieReviews() {\n      setStatus('pending');\n      try {\n        const reviews = await getMovieReviews(movieId, abortController);\n        setMovieReviews(reviews);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    addMovieReviews(movieId, abortController);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === 'canceled') {\n      return;\n    }\n    if (error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && movieReviews.length !== 0 ? (\n        <ReviewsInfo reviews={movieReviews} />\n      ) : (\n        <Message/>\n      )}\n    </>\n  );\n}\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '1196368753ba671380e452b9a1020481';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    poster_path,\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote_average,\n    release_date,\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profile_path,\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMoviesByQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["ReviewsList","styled","ReviewItem","ReviewTitle","reviews","map","id","author","content","MessageWrapper","MessageText","movieId","useParams","useState","movieReviews","setMovieReviews","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieReviews","abort","getMovieReviews","message","toast","Loader","length","API_KEY","BASE_URL","getTrendingMovies","page","controller","axios","signal","response","movies","data","results","title","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","name","join","getMovieCast","actors","cast","profile_path","character","getMoviesByQuery","query","totalResults","total_results"],"sourceRoot":""}